observe({
current_layers <- selected_layers_vector()
previous_layers <- v$selected
proxy = leafletProxy("mapa_principal", session)
layers_to_add = setdiff(current_layers, previous_layers)
layers_to_remove = setdiff(previous_layers, current_layers)
print(layers_to_remove)
for (layer_key in layers_to_remove) {
proxy |>  clearGroup(group = layer_key)
}
successful_layers = setdiff(previous_layers, layers_to_remove)
for (layer_key in layers_to_add) {
#print(rv_config$CAPA_CONFIG_DATA[[layer_key]])
config <- rv_config$CAPA_CONFIG_DATA[[layer_key]]
if (is.null(config)) next
tryCatch({
#load_layer_data(layer_key)
if (rv_config$CAPA_CONFIG_DATA[[layer_key]]$data |> is.null()) {
print("Se lee desde el buig")
data_sf <- load_layer_data(buig = buig,
nombre_buig =  config$nombre_buig,
columnas_interes = config$cols,
custom_filter = ifelse(config$custom_filter |> is.null(),'',config$custom_filter))###Aqui se ve a cambiar por la función custom de dplyr.
rv_config$CAPA_CONFIG_DATA[[layer_key]]$data <- data_sf
} else {
print("Se lee desde local ")
data_sf <- rv_config$CAPA_CONFIG_DATA[[layer_key]]$data
}
geom_type <- as.character(unique(st_geometry_type(data_sf)))[1]
if (geom_type %in% c("POLYGON", "MULTIPOLYGON")) {
proxy |> addPolygons(data = data_sf, fillColor = "#66A3D2", color = "white", weight = 1, fillOpacity = 0.4, group = layer_key)
} else if (geom_type %in% c("LINESTRING", "MULTILINESTRING")) {
proxy |> addPolylines(data = data_sf, color = "black", weight = 3, opacity = 0.8, group = layer_key)
} else if (geom_type %in% c("POINT", "MULTIPOINT")) {
proxy |> addCircleMarkers(data = data_sf, radius = 6, color = "red", fillOpacity = 0.9, group = layer_key)
}
successful_layers <- c(successful_layers, layer_key)
}, error = function(e) {
print(paste("ERROR:", e$message))
showNotification(
ui = HTML(paste("<strong>Error de Carga:</strong> No se pudo cargar la capa <b>", config$nombre_buig, "</b>.",
"Por favor, verifique la conexión o el nombre de la tabla. ")),
type = "error",
duration = 2
)
parent_input_id <- find_parent_input_id(layer_key)
if (!is.null(parent_input_id)) {
current_selection_in_group <- input[[parent_input_id]]
new_selection <- current_selection_in_group[current_selection_in_group != layer_key]
updateCheckboxGroupInput(session, parent_input_id, selected = new_selection)
}
})
}
v$selected <- successful_layers %>% unique()
}) # Fin del observe
}
shinyApp(ui, server)
server <- function(input, output, session) {
source("../../../Reutilizables/Postgres_BUIG/conexion_buig.R")
# 2. Cerrar la conexión cuando la sesión termina
session$onSessionEnded(function() {
if (DBI::dbIsValid(buig)) {
DBI::dbDisconnect(buig)
message("Conexión a PostgreSQL cerrada exitosamente.")
}
})
rv_config <- reactiveValues(CAPA_CONFIG_DATA = CAPA_CONFIG)
INPUT_TO_KEY_MAP <- list(
capa_base_g1 = paste0("g1_c", 1:5),
capa_dem_g2 = paste0("g2_c", 1:3),
capa_hid_g3 = paste0("g3_c", 1:5),
capa_hid_g4 = paste0("g4_c", 1:5),
capa_vial_g5 = paste0("g5_c", 1:4),
capa_infra_g6 = paste0("g6_c", 1:6),
capa_poi_g7 = paste0("g7_c", 1:7)
)
# Función para encontrar el ID del input padre a partir del layer_key
find_parent_input_id <- function(layer_key) {
for (id in names(INPUT_TO_KEY_MAP)) {
if (layer_key %in% INPUT_TO_KEY_MAP[[id]]) {
return(id)
}
}
return(NULL)
}
ALL_LAYER_KEYS <- names(CAPA_CONFIG)
selected_layers_vector <- reactive({
active_layers <- character(0)
# ITERAMOS SOBRE TODOS LOS CHECKBOXES INDIVIDUALES (gX_cY_chk)
for (layer_key in ALL_LAYER_KEYS) {
checkbox_id <- paste0(layer_key, "_chk")
# input[[checkbox_id]] es cómo se accede dinámicamente
if (isTRUE(input[[checkbox_id]])) {
active_layers <- c(active_layers, layer_key)
}
}
return(active_layers)
})
# Almacena el estado de las capas activas del ciclo anterior
v <- reactiveValues(selected = character(0))
# Inicialización del Mapa Base
output$mapa_principal <- renderLeaflet({
leaflet() |>
addTiles() |>
setView(lng = -98, lat = 20, zoom = 6) |>
addLayersControl(
options = layersControlOptions(collapsed = FALSE)
) #|> addDrawToolbar()
})
# Vector de capas seleccionadas
# selected_layers_vector <- reactive({
#   c(input$capa_base_g1, input$capa_dem_g2, input$capa_hid_g3,
#     input$capa_hid_g4, input$capa_vial_g5, input$capa_infra_g6,
#     input$capa_poi_g7)
# })
# observeEvent(input$mapa_principal_draw_new_feature, {##Pendiente hacer algo con el dibujo.
#   print("El usuario hizo un dibujito")
#   print(input$mapa_principal_draw_new_feature)
#   print(class(input$mapa_principal_draw_new_feature))
# })
rv_map_params <- rv_config
ALL_BUTTON_KEYS <- c("g1_c1", "g1_c2","g1_c3") # Lista de todas las capas
ALL_BUTTON_INPUTS <- paste0(ALL_BUTTON_KEYS, "_btn") # Lista de IDs de input
ALL_SAVE_BUTTONS=paste0("modal_",ALL_BUTTON_KEYS,"_save")
#Igual g1_c2
observeEvent(input$modal_g1_c2_save, {
rv_map_params$g1_c2$color <- input$modal_g1_c2_col
rv_map_params$g1_c2$size <- input$modal_g1_c2_size
removeModal()
})
rv_click_state <- reactiveValues()
rv_save_state <- reactiveValues()
# Inicializar con 0s
for (btn_id in ALL_BUTTON_INPUTS) {
rv_click_state[[btn_id]] <- 0
}
for (btn_id in ALL_SAVE_BUTTONS) {
rv_save_state[[btn_id]] <- 0
}
observeEvent({
# Escuchar a todos los botones dinámicamente
sapply(ALL_BUTTON_INPUTS, function(id) input[[id]])
}, {
culprit_key <- NULL
# Iterar sobre todos los botones para encontrar el que aumentó su contador
for (layer_key in ALL_BUTTON_KEYS) {
btn_id <- paste0(layer_key, "_btn")
# El valor actual del contador de clics
current_click_count <- input[[btn_id]]
# El valor anterior del contador de clics
previous_click_count <- isolate(rv_click_state[[btn_id]])
# Si el contador aumentó en uno, este es el botón "culpable"
if (current_click_count > previous_click_count) {
culprit_key <- layer_key
# 🚨 Actualizar el estado anterior para el próximo ciclo
rv_click_state[[btn_id]] <- current_click_count
break # Encontramos al culpable, salimos del bucle
}
}
# 3. Lógica principal con la clave identificada
if (!is.null(culprit_key)) {
current_config <- isolate(rv_map_params[[culprit_key]])
# Usar la clave dinámica aquí
showModal(config_modal(culprit_key, current_config$name, current_config$color))
# Actualizar los inputs del modal dinámicamente
colourpicker::updateColourInput(session, paste0("modal_", culprit_key, "_col"), value = current_config$color)
updateSliderInput(session, paste0("modal_", culprit_key, "_size"), value = current_config$size)
}
}, ignoreInit = TRUE)
observeEvent({
# Escucha a todos los botones Save
sapply(ALL_SAVE_BUTTONS, function(id) input[[id]])
}, {
culprit_key <- NULL
# 1. Identificar qué botón Save fue presionado
for (layer_key in ALL_BUTTON_KEYS) {
# 🚨 CORRECCIÓN 1: Definir el ID correcto del botón de Guardar
save_btn_id <- paste0("modal_", layer_key, "_save")
# 🚨 CORRECCIÓN 2: Usar ifelse para manejar el valor NULL inicial
# Si input[[ID]] es NULL, asumimos que el contador es 0 (no se ha presionado).
current_save_count <- ifelse(is.null(input[[save_btn_id]]),
0,
input[[save_btn_id]])
previous_save_count <- isolate(rv_save_state[[save_btn_id]])
# Ahora la comparación funciona, ya que current_save_count es 0, no NULL.
if (current_save_count > previous_save_count) {
culprit_key <- layer_key
# Actualizamos el estado anterior con el valor que DISPARÓ el evento.
rv_save_state[[save_btn_id]] <- current_save_count
break
}
}
# 2. Ejecutar la lógica de guardar si se encontró al culpable
if (!is.null(culprit_key)) {
modal_col_id <- paste0("modal_", culprit_key, "_col")
modal_size_id <- paste0("modal_", culprit_key, "_size")
# Es seguro acceder a estos inputs ya que el modal estaba abierto
# (y por lo tanto estos inputs deben tener valores)
rv_map_params[[culprit_key]]$color <- input[[modal_col_id]]
rv_map_params[[culprit_key]]$size <- input[[modal_size_id]]
removeModal()
##Y actualizamos el leafletproxy. No hay que usar más informacion, solo borramos la capa, y la agregamos con el nuevo color
#culprit_key
group=find_parent_input_id(culprit_key)
#Removegroup
proxy = leafletProxy("mapa_principal", session)
proxy |>  clearGroup(group = culprit_key)
#Agregamos grupo
data_para_agregar=rv_config$CAPA_CONFIG_DATA[[culprit_key]]$data
geom_type <- as.character(unique(st_geometry_type(data_para_agregar)))[1]
if (geom_type %in% c("POLYGON", "MULTIPOLYGON")) {
proxy |> addPolygons(data = data_para_agregar, fillColor = rv_config$CAPA_CONFIG_DATA[[culprit_key]]$color, color = "white", weight = 1, fillOpacity = 0.4, group = layer_key)
} else if (geom_type %in% c("LINESTRING", "MULTILINESTRING")) {
proxy |> addPolylines(data = data_para_agregar, color = rv_config[[culprit_key]]$color, weight = 3, opacity = 0.8, group = layer_key)
} else if (geom_type %in% c("POINT", "MULTIPOINT")) {
proxy |> addCircleMarkers(data = data_para_agregar, radius = 6, color = rv_config$CAPA_CONFIG_DATA[[culprit_key]]$color, fillOpacity = 0.9, group = layer_key)
}
}
}, ignoreInit = TRUE)
observe({
current_layers <- selected_layers_vector()
previous_layers <- v$selected
proxy = leafletProxy("mapa_principal", session)
layers_to_add = setdiff(current_layers, previous_layers)
layers_to_remove = setdiff(previous_layers, current_layers)
print(layers_to_remove)
for (layer_key in layers_to_remove) {
proxy |>  clearGroup(group = layer_key)
}
successful_layers = setdiff(previous_layers, layers_to_remove)
for (layer_key in layers_to_add) {
#print(rv_config$CAPA_CONFIG_DATA[[layer_key]])
config <- rv_config$CAPA_CONFIG_DATA[[layer_key]]
if (is.null(config)) next
tryCatch({
#load_layer_data(layer_key)
if (rv_config$CAPA_CONFIG_DATA[[layer_key]]$data |> is.null()) {
print("Se lee desde el buig")
data_sf <- load_layer_data(buig = buig,
nombre_buig =  config$nombre_buig,
columnas_interes = config$cols,
custom_filter = ifelse(config$custom_filter |> is.null(),'',config$custom_filter))###Aqui se ve a cambiar por la función custom de dplyr.
rv_config$CAPA_CONFIG_DATA[[layer_key]]$data <- data_sf
} else {
print("Se lee desde local ")
data_sf <- rv_config$CAPA_CONFIG_DATA[[layer_key]]$data
}
geom_type <- as.character(unique(st_geometry_type(data_sf)))[1]
if (geom_type %in% c("POLYGON", "MULTIPOLYGON")) {
proxy |> addPolygons(data = data_sf, fillColor = "#66A3D2", color = "white", weight = 1, fillOpacity = 0.4, group = layer_key)
} else if (geom_type %in% c("LINESTRING", "MULTILINESTRING")) {
proxy |> addPolylines(data = data_sf, color = "black", weight = 3, opacity = 0.8, group = layer_key)
} else if (geom_type %in% c("POINT", "MULTIPOINT")) {
proxy |> addCircleMarkers(data = data_sf, radius = 6, color = "red", fillOpacity = 0.9, group = layer_key)
}
successful_layers <- c(successful_layers, layer_key)
}, error = function(e) {
print(paste("ERROR:", e$message))
showNotification(
ui = HTML(paste("<strong>Error de Carga:</strong> No se pudo cargar la capa <b>", config$nombre_buig, "</b>.",
"Por favor, verifique la conexión o el nombre de la tabla. ")),
type = "error",
duration = 2
)
parent_input_id <- find_parent_input_id(layer_key)
if (!is.null(parent_input_id)) {
current_selection_in_group <- input[[parent_input_id]]
new_selection <- current_selection_in_group[current_selection_in_group != layer_key]
updateCheckboxGroupInput(session, parent_input_id, selected = new_selection)
}
})
}
v$selected <- successful_layers %>% unique()
}) # Fin del observe
}
shinyApp(ui, server)
server <- function(input, output, session) {
source("../../../Reutilizables/Postgres_BUIG/conexion_buig.R")
# 2. Cerrar la conexión cuando la sesión termina
session$onSessionEnded(function() {
if (DBI::dbIsValid(buig)) {
DBI::dbDisconnect(buig)
message("Conexión a PostgreSQL cerrada exitosamente.")
}
})
rv_config <- reactiveValues(CAPA_CONFIG_DATA = CAPA_CONFIG)
INPUT_TO_KEY_MAP <- list(
capa_base_g1 = paste0("g1_c", 1:5),
capa_dem_g2 = paste0("g2_c", 1:3),
capa_hid_g3 = paste0("g3_c", 1:5),
capa_hid_g4 = paste0("g4_c", 1:5),
capa_vial_g5 = paste0("g5_c", 1:4),
capa_infra_g6 = paste0("g6_c", 1:6),
capa_poi_g7 = paste0("g7_c", 1:7)
)
# Función para encontrar el ID del input padre a partir del layer_key
find_parent_input_id <- function(layer_key) {
for (id in names(INPUT_TO_KEY_MAP)) {
if (layer_key %in% INPUT_TO_KEY_MAP[[id]]) {
return(id)
}
}
return(NULL)
}
ALL_LAYER_KEYS <- names(CAPA_CONFIG)
selected_layers_vector <- reactive({
active_layers <- character(0)
# ITERAMOS SOBRE TODOS LOS CHECKBOXES INDIVIDUALES (gX_cY_chk)
for (layer_key in ALL_LAYER_KEYS) {
checkbox_id <- paste0(layer_key, "_chk")
# input[[checkbox_id]] es cómo se accede dinámicamente
if (isTRUE(input[[checkbox_id]])) {
active_layers <- c(active_layers, layer_key)
}
}
return(active_layers)
})
# Almacena el estado de las capas activas del ciclo anterior
v <- reactiveValues(selected = character(0))
# Inicialización del Mapa Base
output$mapa_principal <- renderLeaflet({
leaflet() |>
addTiles() |>
setView(lng = -98, lat = 20, zoom = 6) |>
addLayersControl(
options = layersControlOptions(collapsed = FALSE)
) #|> addDrawToolbar()
})
# Vector de capas seleccionadas
# selected_layers_vector <- reactive({
#   c(input$capa_base_g1, input$capa_dem_g2, input$capa_hid_g3,
#     input$capa_hid_g4, input$capa_vial_g5, input$capa_infra_g6,
#     input$capa_poi_g7)
# })
# observeEvent(input$mapa_principal_draw_new_feature, {##Pendiente hacer algo con el dibujo.
#   print("El usuario hizo un dibujito")
#   print(input$mapa_principal_draw_new_feature)
#   print(class(input$mapa_principal_draw_new_feature))
# })
rv_map_params <- rv_config
ALL_BUTTON_KEYS <- c("g1_c1", "g1_c2","g1_c3") # Lista de todas las capas
ALL_BUTTON_INPUTS <- paste0(ALL_BUTTON_KEYS, "_btn") # Lista de IDs de input
ALL_SAVE_BUTTONS=paste0("modal_",ALL_BUTTON_KEYS,"_save")
#Igual g1_c2
observeEvent(input$modal_g1_c2_save, {
rv_map_params$g1_c2$color <- input$modal_g1_c2_col
rv_map_params$g1_c2$size <- input$modal_g1_c2_size
removeModal()
})
rv_click_state <- reactiveValues()
rv_save_state <- reactiveValues()
# Inicializar con 0s
for (btn_id in ALL_BUTTON_INPUTS) {
rv_click_state[[btn_id]] <- 0
}
for (btn_id in ALL_SAVE_BUTTONS) {
rv_save_state[[btn_id]] <- 0
}
observeEvent({
# Escuchar a todos los botones dinámicamente
sapply(ALL_BUTTON_INPUTS, function(id) input[[id]])
}, {
culprit_key <- NULL
# Iterar sobre todos los botones para encontrar el que aumentó su contador
for (layer_key in ALL_BUTTON_KEYS) {
btn_id <- paste0(layer_key, "_btn")
# El valor actual del contador de clics
current_click_count <- input[[btn_id]]
# El valor anterior del contador de clics
previous_click_count <- isolate(rv_click_state[[btn_id]])
# Si el contador aumentó en uno, este es el botón "culpable"
if (current_click_count > previous_click_count) {
culprit_key <- layer_key
# 🚨 Actualizar el estado anterior para el próximo ciclo
rv_click_state[[btn_id]] <- current_click_count
break # Encontramos al culpable, salimos del bucle
}
}
# 3. Lógica principal con la clave identificada
if (!is.null(culprit_key)) {
current_config <- isolate(rv_map_params[[culprit_key]])
# Usar la clave dinámica aquí
showModal(config_modal(culprit_key, current_config$name, current_config$color))
# Actualizar los inputs del modal dinámicamente
colourpicker::updateColourInput(session, paste0("modal_", culprit_key, "_col"), value = current_config$color)
updateSliderInput(session, paste0("modal_", culprit_key, "_size"), value = current_config$size)
}
}, ignoreInit = TRUE)
observeEvent({
# Escucha a todos los botones Save
sapply(ALL_SAVE_BUTTONS, function(id) input[[id]])
}, {
culprit_key <- NULL
# 1. Identificar qué botón Save fue presionado
for (layer_key in ALL_BUTTON_KEYS) {
# 🚨 CORRECCIÓN 1: Definir el ID correcto del botón de Guardar
save_btn_id <- paste0("modal_", layer_key, "_save")
# 🚨 CORRECCIÓN 2: Usar ifelse para manejar el valor NULL inicial
# Si input[[ID]] es NULL, asumimos que el contador es 0 (no se ha presionado).
current_save_count <- ifelse(is.null(input[[save_btn_id]]),
0,
input[[save_btn_id]])
previous_save_count <- isolate(rv_save_state[[save_btn_id]])
# Ahora la comparación funciona, ya que current_save_count es 0, no NULL.
if (current_save_count > previous_save_count) {
culprit_key <- layer_key
# Actualizamos el estado anterior con el valor que DISPARÓ el evento.
rv_save_state[[save_btn_id]] <- current_save_count
break
}
}
# 2. Ejecutar la lógica de guardar si se encontró al culpable
if (!is.null(culprit_key)) {
modal_col_id <- paste0("modal_", culprit_key, "_col")
modal_size_id <- paste0("modal_", culprit_key, "_size")
# Es seguro acceder a estos inputs ya que el modal estaba abierto
# (y por lo tanto estos inputs deben tener valores)
rv_map_params[[culprit_key]]$color <- input[[modal_col_id]]
rv_map_params[[culprit_key]]$size <- input[[modal_size_id]]
removeModal()
##Y actualizamos el leafletproxy. No hay que usar más informacion, solo borramos la capa, y la agregamos con el nuevo color
#culprit_key
group=find_parent_input_id(culprit_key)
#Removegroup
proxy = leafletProxy("mapa_principal", session)
proxy |>  clearGroup(group = culprit_key)
#Agregamos grupo
data_para_agregar=rv_config$CAPA_CONFIG_DATA[[culprit_key]]$data
geom_type <- as.character(unique(st_geometry_type(data_para_agregar)))[1]
if (geom_type %in% c("POLYGON", "MULTIPOLYGON")) {
proxy |> addPolygons(data = data_para_agregar, fillColor =input[[modal_col_id]], color = "white", weight = 1, fillOpacity = 0.4, group = layer_key)
} else if (geom_type %in% c("LINESTRING", "MULTILINESTRING")) {
proxy |> addPolylines(data = data_para_agregar, color = input[[modal_col_id]], weight = 3, opacity = 0.8, group = layer_key)
} else if (geom_type %in% c("POINT", "MULTIPOINT")) {
proxy |> addCircleMarkers(data = data_para_agregar, radius = 6, color = input[[modal_col_id]], fillOpacity = 0.9, group = layer_key)
}
}
}, ignoreInit = TRUE)
observe({
current_layers <- selected_layers_vector()
previous_layers <- v$selected
proxy = leafletProxy("mapa_principal", session)
layers_to_add = setdiff(current_layers, previous_layers)
layers_to_remove = setdiff(previous_layers, current_layers)
print(layers_to_remove)
for (layer_key in layers_to_remove) {
proxy |>  clearGroup(group = layer_key)
}
successful_layers = setdiff(previous_layers, layers_to_remove)
for (layer_key in layers_to_add) {
#print(rv_config$CAPA_CONFIG_DATA[[layer_key]])
config <- rv_config$CAPA_CONFIG_DATA[[layer_key]]
if (is.null(config)) next
tryCatch({
#load_layer_data(layer_key)
if (rv_config$CAPA_CONFIG_DATA[[layer_key]]$data |> is.null()) {
print("Se lee desde el buig")
data_sf <- load_layer_data(buig = buig,
nombre_buig =  config$nombre_buig,
columnas_interes = config$cols,
custom_filter = ifelse(config$custom_filter |> is.null(),'',config$custom_filter))###Aqui se ve a cambiar por la función custom de dplyr.
rv_config$CAPA_CONFIG_DATA[[layer_key]]$data <- data_sf
} else {
print("Se lee desde local ")
data_sf <- rv_config$CAPA_CONFIG_DATA[[layer_key]]$data
}
geom_type <- as.character(unique(st_geometry_type(data_sf)))[1]
if (geom_type %in% c("POLYGON", "MULTIPOLYGON")) {
proxy |> addPolygons(data = data_sf, fillColor = "#66A3D2", color = "white", weight = 1, fillOpacity = 0.4, group = layer_key)
} else if (geom_type %in% c("LINESTRING", "MULTILINESTRING")) {
proxy |> addPolylines(data = data_sf, color = "black", weight = 3, opacity = 0.8, group = layer_key)
} else if (geom_type %in% c("POINT", "MULTIPOINT")) {
proxy |> addCircleMarkers(data = data_sf, radius = 6, color = "red", fillOpacity = 0.9, group = layer_key)
}
successful_layers <- c(successful_layers, layer_key)
}, error = function(e) {
print(paste("ERROR:", e$message))
showNotification(
ui = HTML(paste("<strong>Error de Carga:</strong> No se pudo cargar la capa <b>", config$nombre_buig, "</b>.",
"Por favor, verifique la conexión o el nombre de la tabla. ")),
type = "error",
duration = 2
)
parent_input_id <- find_parent_input_id(layer_key)
if (!is.null(parent_input_id)) {
current_selection_in_group <- input[[parent_input_id]]
new_selection <- current_selection_in_group[current_selection_in_group != layer_key]
updateCheckboxGroupInput(session, parent_input_id, selected = new_selection)
}
})
}
v$selected <- successful_layers %>% unique()
}) # Fin del observe
}
shinyApp(ui, server)
rsconnect::writeManifest()
rsconnect::writeManifest("../app.R")
rsconnect::writeManifest("../")
library(sf)
source("../../../Reutilizables/Postgres_BUIG/conexion_buig.R")
st_read(buig,"hospitales_hgo")->hhgo
View(hhgo)
hhgo st_read("../Inputs/hospitales_hgo.geojson")
hhgo= st_read("../Inputs/hospitales_hgo.geojson")
hhgo |> dplyr::filter(grepl(pattern = "Regional",name))
hhgo |> dplyr::filter(grepl(pattern = "Regional",name)) |> st_write("../Inputs/hospitales_hgo_reg.geojson",driver = "GeoJSON")
hhgo |> dplyr::filter(!grepl(pattern = "Regional",name)) |> st_write("../Inputs/hospitales_hgo_gral.geojson",driver = "GeoJSON")
hhgo= st_read("../Inputs/red_carretera_sipdus.geojson")
hhgo |> dplyr::filter(administra=='Federal') |> st_write("../Inputs/red_carretera_sipdus_fed.geojson",driver = "GeoJSON")
hhgo |> dplyr::filter(administra=='Federal') |> st_write("../Inputs/red_carretera_sipdus_federal.geojson",driver = "GeoJSON")
hhgo |> dplyr::filter(administra=='Estatal') |> st_write("../Inputs/red_carretera_sipdus_estatal.geojson",driver = "GeoJSON")
hhgo |> dplyr::filter(administra=='Municipal') |> st_write("../Inputs/red_carretera_sipdus_municipal.geojson",driver = "GeoJSON")
